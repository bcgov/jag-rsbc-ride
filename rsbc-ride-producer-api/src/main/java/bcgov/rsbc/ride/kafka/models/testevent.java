/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bcgov.rsbc.ride.kafka.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class testevent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5637220503914655999L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"testevent\",\"namespace\":\"bcgov.rsbc.ride.kafka.models\",\"fields\":[{\"name\":\"typeofevent\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"payload\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"payloadrecord\",\"fields\":[{\"name\":\"username\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"fname\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"lname\",\"type\":\"string\",\"doc\":\"\"}]}},\"doc\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<testevent> ENCODER =
      new BinaryMessageEncoder<testevent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<testevent> DECODER =
      new BinaryMessageDecoder<testevent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<testevent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<testevent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<testevent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<testevent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this testevent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a testevent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a testevent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static testevent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence typeofevent;
  private java.util.List<payloadrecord> payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public testevent() {}

  /**
   * All-args constructor.
   * @param typeofevent The new value for typeofevent
   * @param payload The new value for payload
   */
  public testevent(CharSequence typeofevent, java.util.List<payloadrecord> payload) {
    this.typeofevent = typeofevent;
    this.payload = payload;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return typeofevent;
    case 1: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: typeofevent = (CharSequence)value$; break;
    case 1: payload = (java.util.List<payloadrecord>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'typeofevent' field.
   * @return The value of the 'typeofevent' field.
   */
  public CharSequence getTypeofevent() {
    return typeofevent;
  }


  /**
   * Sets the value of the 'typeofevent' field.
   * @param value the value to set.
   */
  public void setTypeofevent(CharSequence value) {
    this.typeofevent = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.util.List<payloadrecord> getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.util.List<payloadrecord> value) {
    this.payload = value;
  }

  /**
   * Creates a new testevent RecordBuilder.
   * @return A new testevent RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new testevent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new testevent RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new testevent RecordBuilder by copying an existing testevent instance.
   * @param other The existing instance to copy.
   * @return A new testevent RecordBuilder
   */
  public static Builder newBuilder(testevent other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for testevent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<testevent>
    implements org.apache.avro.data.RecordBuilder<testevent> {

    private CharSequence typeofevent;
    private java.util.List<payloadrecord> payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.typeofevent)) {
        this.typeofevent = data().deepCopy(fields()[0].schema(), other.typeofevent);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing testevent instance
     * @param other The existing instance to copy.
     */
    private Builder(testevent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.typeofevent)) {
        this.typeofevent = data().deepCopy(fields()[0].schema(), other.typeofevent);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'typeofevent' field.
      * @return The value.
      */
    public CharSequence getTypeofevent() {
      return typeofevent;
    }


    /**
      * Sets the value of the 'typeofevent' field.
      * @param value The value of 'typeofevent'.
      * @return This builder.
      */
    public Builder setTypeofevent(CharSequence value) {
      validate(fields()[0], value);
      this.typeofevent = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'typeofevent' field has been set.
      * @return True if the 'typeofevent' field has been set, false otherwise.
      */
    public boolean hasTypeofevent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'typeofevent' field.
      * @return This builder.
      */
    public Builder clearTypeofevent() {
      typeofevent = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.util.List<payloadrecord> getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public Builder setPayload(java.util.List<payloadrecord> value) {
      validate(fields()[1], value);
      this.payload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public Builder clearPayload() {
      payload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public testevent build() {
      try {
        testevent record = new testevent();
        record.typeofevent = fieldSetFlags()[0] ? this.typeofevent : (CharSequence) defaultValue(fields()[0]);
        record.payload = fieldSetFlags()[1] ? this.payload : (java.util.List<payloadrecord>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<testevent>
    WRITER$ = (org.apache.avro.io.DatumWriter<testevent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<testevent>
    READER$ = (org.apache.avro.io.DatumReader<testevent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.typeofevent);

    long size0 = this.payload.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (payloadrecord e0: this.payload) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.typeofevent = in.readString(this.typeofevent instanceof Utf8 ? (Utf8)this.typeofevent : null);

      long size0 = in.readArrayStart();
      java.util.List<payloadrecord> a0 = this.payload;
      if (a0 == null) {
        a0 = new SpecificData.Array<payloadrecord>((int)size0, SCHEMA$.getField("payload").schema());
        this.payload = a0;
      } else a0.clear();
      SpecificData.Array<payloadrecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<payloadrecord>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          payloadrecord e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new payloadrecord();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.typeofevent = in.readString(this.typeofevent instanceof Utf8 ? (Utf8)this.typeofevent : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<payloadrecord> a0 = this.payload;
          if (a0 == null) {
            a0 = new SpecificData.Array<payloadrecord>((int)size0, SCHEMA$.getField("payload").schema());
            this.payload = a0;
          } else a0.clear();
          SpecificData.Array<payloadrecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<payloadrecord>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              payloadrecord e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new payloadrecord();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










