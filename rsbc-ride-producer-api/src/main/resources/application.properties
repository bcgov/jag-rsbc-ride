


# quarkus.container-image.registry=${IMAGE_REGISTRY}
# quarkus.container-image.group=${IMAGE_NAMESPACE}
# quarkus.container-image.name=${IMAGE_NAME}
# quarkus.container-image.tag=${IMAGE_TAG}
quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.info-title=RIDE Producer API
quarkus.smallrye-openapi.info-version=1.0
quarkus.smallrye-openapi.info-description=API for external systems to send events to RIDE
quarkus.smallrye-openapi.info-terms-of-service=TBD
quarkus.smallrye-openapi.info-contact-email=RSIOpsSupport@gov.bc.ca
quarkus.smallrye-openapi.info-contact-name=RSO Ops Support
quarkus.smallrye-openapi.info-contact-url=https://github.com/bcgov/jag-rsbc-ride
quarkus.smallrye-openapi.info-license-name=Apache 2.0
quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html


# Kafka general parameters
kafka.bootstrap.servers=${KAFKA_SERVER}
kafka.security.protocol=${KAFKA_SEC_PROTOCOL}
kafka.sasl.mechanism=${KAFKA_SASL_MECH}
kafka.sasl.jaas.config=${KAFKA_SASL_CONFIG};

# For compatibility with Confluent kind of schema
mp.messaging.connector.smallrye-kafka.schema.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}


quarkus.mongodb.connection-string = ${MONGO_CONN_STR}
quarkus.mongodb.database = ${AUTH_DB_NAME}


recon.api.host=${RECON_SVC_HOST}



# Configuring Test event channel

mp.messaging.outgoing.outgoing-testevent.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-testevent.topic=${TEST_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-testevent.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-testevent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-testevent.specific.avro.reader=true




# Configuring app_accepted event channel

mp.messaging.outgoing.outgoing-appaccepted.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-appaccepted.topic=${APP_ACCEPTED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-appaccepted.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-appaccepted.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-appaccepted.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-appaccepted.specific.avro.reader=true


# Configuring disclosure_sent event channel

mp.messaging.outgoing.outgoing-disclosuresent.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-disclosuresent.topic=${DISCLOSURE_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-disclosuresent.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-disclosuresent.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-disclosuresent.specific.avro.reader=true


# Configuring evidence_submitted event channel

mp.messaging.outgoing.outgoing-evidencesubmit.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-evidencesubmit.topic=${EVSUBMITTED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-evidencesubmit.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-evidencesubmit.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-evidencesubmit.specific.avro.reader=true


# Configuring payment_received event channel

mp.messaging.outgoing.outgoing-payreceived.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-payreceived.topic=${PAYRECVD_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-payreceived.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-payreceived.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-payreceived.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-payreceived.specific.avro.reader=true

# Configuring review_scheduled event channel

mp.messaging.outgoing.outgoing-reviewscheduled.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-reviewscheduled.topic=${REVSCHED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-reviewscheduled.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.connector.smallrye-reviewscheduled.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-reviewscheduled.specific.avro.reader=true


#-------------------------------------------------------------------etk configuration----------------------------------------------------------------

# Configuring issuance event channel
mp.messaging.outgoing.outgoing-issuance.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-issuance.topic=${ISSUANCE_EVENT_TOPIC}
#mp.messaging.outgoing.outgoing-issuance.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-issuance.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
mp.messaging.connector.smallrye-issuance.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.outgoing.outgoing-issuance.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-issuance.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-issuance.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-issuance.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-issuance.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-issuance.specific.avro.reader=true
mp.messaging.outgoing.outgoing-issuance.value.registry.json.encode.empty=true


# Configuring payment event channel
mp.messaging.outgoing.outgoing-payment.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-payment.topic=${PAYMENT_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-payment.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
mp.messaging.connector.smallrye-payment.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.outgoing.outgoing-payment.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.outgoing-payment.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-payment.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-payment.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-payment.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-payment.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-payment.specific.avro.reader=true
mp.messaging.outgoing.outgoing-payment.value.registry.json.encode.empty=true


# Configuring dispute event channel
mp.messaging.outgoing.outgoing-dispute.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-dispute.topic=${DISPUTE_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-dispute.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
mp.messaging.connector.smallrye-dispute.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-dispute.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-dispute.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-dispute.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-dispute.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-dispute.specific.avro.reader=true
mp.messaging.outgoing.outgoing-dispute.value.registry.json.encode.empty=true

# Configuring disputeupdate event channel
mp.messaging.outgoing.outgoing-disputeupdate.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-disputeupdate.topic=${DISPUTE_UPDATE_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-disputeupdate.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-disputeupdate.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-disputeupdate.specific.avro.reader=true
mp.messaging.outgoing.outgoing-disputeupdate.value.registry.json.encode.empty=true

# Configuring contraventions event channel
#mp.messaging.outgoing.outgoing-contraventions.connector=smallrye-kafka
#mp.messaging.outgoing.outgoing-contraventions.topic=${CONTRAVENTIONS_EVENT_TOPIC}
#mp.messaging.outgoing.outgoing-contraventions.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
#mp.messaging.connector.smallrye-contraventions.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
##mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.outgoing.outgoing-contraventions.ssl.protocol=${SSL_PROTOCOL}
#mp.messaging.outgoing.outgoing-contraventions.ssl.truststore.location=${SSL_TRUSTSTORE}
#mp.messaging.outgoing.outgoing-contraventions.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
#mp.messaging.outgoing.outgoing-contraventions.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
#mp.messaging.outgoing.outgoing-contraventions.specific.avro.reader=true
#mp.messaging.outgoing.outgoing-contraventions.value.registry.json.encode.empty=true


# Configuring violations event channel
mp.messaging.outgoing.outgoing-violations.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-violations.topic=${VIOLATIONS_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-violations.value.serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
mp.messaging.connector.smallrye-violations.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.outgoing.outgoing-violations.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-violations.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-violations.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-violations.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-violations.specific.avro.reader=true
mp.messaging.outgoing.outgoing-violations.value.registry.json.encode.empty=true


## Configuring disputeupdate event channel
#mp.messaging.outgoing.outgoing-disputeupdate.connector=smallrye-kafka
#mp.messaging.outgoing.outgoing-disputeupdate.topic=${DISPUTE_UPDATE_EVENT_TOPIC}
#mp.messaging.outgoing.outgoing-disputeupdate.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
#mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
#mp.messaging.outgoing.outgoing-disputeupdate.ssl.protocol=${SSL_PROTOCOL}
#mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.location=${SSL_TRUSTSTORE}
#mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
#mp.messaging.outgoing.outgoing-disputeupdate.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
##mp.messaging.outgoing.outgoing-disputeupdate.specific.avro.reader=true