


# quarkus.container-image.registry=${IMAGE_REGISTRY}
# quarkus.container-image.group=${IMAGE_NAMESPACE}
# quarkus.container-image.name=${IMAGE_NAME}
# quarkus.container-image.tag=${IMAGE_TAG}



# Kafka general parameters
kafka.bootstrap.servers=${KAFKA_SERVER}
kafka.security.protocol=${KAFKA_SEC_PROTOCOL}
kafka.sasl.mechanism=${KAFKA_SASL_MECH}
kafka.sasl.jaas.config=${KAFKA_SASL_CONFIG};
kafka.schema.registry.url=${KAFKA_SCHEMA_REGISTRY}


# Configuring Test event channel

mp.messaging.outgoing.outgoing-testevent.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-testevent.topic=${TEST_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-testevent.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-testevent.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-testevent.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-testevent.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-testevent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-testevent.specific.avro.reader=true
mp.messaging.outgoing.outgoing-testevent.apicurio.registry.auto-register=true




# Configuring app_accepted event channel

mp.messaging.outgoing.outgoing-appaccepted.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-appaccepted.topic=${APP_ACCEPTED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-appaccepted.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-appaccepted.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-appaccepted.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-appaccepted.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-appaccepted.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-appaccepted.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-appaccepted.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-appaccepted.specific.avro.reader=true
mp.messaging.outgoing.outgoing-appaccepted.apicurio.registry.auto-register=true


# Configuring disclosure_sent event channel

mp.messaging.outgoing.outgoing-disclosuresent.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-disclosuresent.topic=${DISCLOSURE_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-disclosuresent.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-disclosuresent.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-disclosuresent.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-disclosuresent.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-disclosuresent.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-disclosuresent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-disclosuresent.specific.avro.reader=true
mp.messaging.outgoing.outgoing-disclosuresent.apicurio.registry.auto-register=true


# Configuring evidence_submitted event channel

mp.messaging.outgoing.outgoing-evidencesubmit.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-evidencesubmit.topic=${EVSUBMITTED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-evidencesubmit.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-evidencesubmit.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-evidencesubmit.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-evidencesubmit.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-evidencesubmit.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-evidencesubmit.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-evidencesubmit.specific.avro.reader=true
mp.messaging.outgoing.outgoing-evidencesubmit.apicurio.registry.auto-register=true


# Configuring payment_received event channel

mp.messaging.outgoing.outgoing-payreceived.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-payreceived.topic=${PAYRECVD_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-payreceived.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-payreceived.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-payreceived.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-payreceived.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-payreceived.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-payreceived.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-payreceived.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-payreceived.specific.avro.reader=true
mp.messaging.outgoing.outgoing-payreceived.apicurio.registry.auto-register=true

# Configuring review_scheduled event channel

mp.messaging.outgoing.outgoing-reviewscheduled.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-reviewscheduled.topic=${REVSCHED_EVENT_TOPIC}
mp.messaging.outgoing.outgoing-reviewscheduled.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
mp.messaging.outgoing.outgoing-reviewscheduled.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.outgoing-reviewscheduled.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.outgoing-reviewscheduled.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.connector.smallrye-reviewscheduled.apicurio.registry.url=${KAFKA_SCHEMA_REGISTRY}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-reviewscheduled.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.outgoing.outgoing-reviewscheduled.specific.avro.reader=true
mp.messaging.outgoing.outgoing-reviewscheduled.apicurio.registry.auto-register=true