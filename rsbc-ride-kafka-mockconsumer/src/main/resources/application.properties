# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=${KAFKA-SERVER}:9092
# quarkus.http.port=8081

# https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/kafka/kafka.html#kafka-installation

# Configuring the incoming channel (read from Kafka)
mp.messaging.incoming.incoming-channel.connector=smallrye-kafka
mp.messaging.incoming.incoming-channel.topic=mock-etk-event
mp.messaging.incoming.incoming-channel.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.incoming-channel.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Enable both liveness and readiness checks (default is true)
mp.messaging.incoming.incoming-channel.health-enabled=true

# Enable only the readiness check (default is true)
mp.messaging.incoming.incoming-channel.health-readiness-enabled=true

# Configuring the application that consumes the messages
endpointURL.consumer_application_mock=${MOCKSVC_URL}

# What to do when there is no initial offset in Kafka. Accepted values are earliest, latest and none
mp.messaging.incoming.incoming-channel.auto.offset.reset=latest

# A unique string that identifies the consumer group the application belongs to. If not set, a unique, generated id is used
# mp.messaging.incoming.incoming-channel.group.id=consumerGroup1

#If enabled, consumerâ€™s offset will be periodically committed in the background by the underlying Kafka client, 
# ignoring the actual processing outcome of the records. It is recommended to NOT enable this setting 
# and let Reactive Messaging handles the commit.
mp.messaging.incoming.incoming-channel.enable.auto.commit=false

# The number of partitions to be consumed concurrently. The connector creates the specified amount of Kafka consumers. 
# It should match the number of partition of the targeted topic
# mp.messaging.incoming.incoming-channel.partitions=1

