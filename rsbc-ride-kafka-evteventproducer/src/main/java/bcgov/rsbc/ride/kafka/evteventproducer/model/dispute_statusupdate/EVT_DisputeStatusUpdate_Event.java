/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EVT_DisputeStatusUpdate_Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6206741916543009917L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EVT_DisputeStatusUpdate_Event\",\"namespace\":\"bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate\",\"fields\":[{\"name\":\"ticket_no\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"count_nbr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"dispute_action_dt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"dispute_action_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EVT_DisputeStatusUpdate_Event> ENCODER =
      new BinaryMessageEncoder<EVT_DisputeStatusUpdate_Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EVT_DisputeStatusUpdate_Event> DECODER =
      new BinaryMessageDecoder<EVT_DisputeStatusUpdate_Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EVT_DisputeStatusUpdate_Event> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EVT_DisputeStatusUpdate_Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EVT_DisputeStatusUpdate_Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EVT_DisputeStatusUpdate_Event>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EVT_DisputeStatusUpdate_Event to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EVT_DisputeStatusUpdate_Event from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EVT_DisputeStatusUpdate_Event instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EVT_DisputeStatusUpdate_Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String ticket_no;
  @Deprecated public java.lang.String count_nbr;
  @Deprecated public java.lang.String dispute_action_dt;
  @Deprecated public java.lang.String dispute_action_code;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EVT_DisputeStatusUpdate_Event() {}

  /**
   * All-args constructor.
   * @param ticket_no The new value for ticket_no
   * @param count_nbr The new value for count_nbr
   * @param dispute_action_dt The new value for dispute_action_dt
   * @param dispute_action_code The new value for dispute_action_code
   */
  public EVT_DisputeStatusUpdate_Event(java.lang.String ticket_no, java.lang.String count_nbr, java.lang.String dispute_action_dt, java.lang.String dispute_action_code) {
    this.ticket_no = ticket_no;
    this.count_nbr = count_nbr;
    this.dispute_action_dt = dispute_action_dt;
    this.dispute_action_code = dispute_action_code;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ticket_no;
    case 1: return count_nbr;
    case 2: return dispute_action_dt;
    case 3: return dispute_action_code;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ticket_no = value$ != null ? value$.toString() : null; break;
    case 1: count_nbr = value$ != null ? value$.toString() : null; break;
    case 2: dispute_action_dt = value$ != null ? value$.toString() : null; break;
    case 3: dispute_action_code = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ticket_no' field.
   * @return The value of the 'ticket_no' field.
   */
  public java.lang.String getTicketNo() {
    return ticket_no;
  }


  /**
   * Sets the value of the 'ticket_no' field.
   * @param value the value to set.
   */
  public void setTicketNo(java.lang.String value) {
    this.ticket_no = value;
  }

  /**
   * Gets the value of the 'count_nbr' field.
   * @return The value of the 'count_nbr' field.
   */
  public java.lang.String getCountNbr() {
    return count_nbr;
  }


  /**
   * Sets the value of the 'count_nbr' field.
   * @param value the value to set.
   */
  public void setCountNbr(java.lang.String value) {
    this.count_nbr = value;
  }

  /**
   * Gets the value of the 'dispute_action_dt' field.
   * @return The value of the 'dispute_action_dt' field.
   */
  public java.lang.String getDisputeActionDt() {
    return dispute_action_dt;
  }


  /**
   * Sets the value of the 'dispute_action_dt' field.
   * @param value the value to set.
   */
  public void setDisputeActionDt(java.lang.String value) {
    this.dispute_action_dt = value;
  }

  /**
   * Gets the value of the 'dispute_action_code' field.
   * @return The value of the 'dispute_action_code' field.
   */
  public java.lang.String getDisputeActionCode() {
    return dispute_action_code;
  }


  /**
   * Sets the value of the 'dispute_action_code' field.
   * @param value the value to set.
   */
  public void setDisputeActionCode(java.lang.String value) {
    this.dispute_action_code = value;
  }

  /**
   * Creates a new EVT_DisputeStatusUpdate_Event RecordBuilder.
   * @return A new EVT_DisputeStatusUpdate_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder newBuilder() {
    return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder();
  }

  /**
   * Creates a new EVT_DisputeStatusUpdate_Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EVT_DisputeStatusUpdate_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder newBuilder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder other) {
    if (other == null) {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder();
    } else {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder(other);
    }
  }

  /**
   * Creates a new EVT_DisputeStatusUpdate_Event RecordBuilder by copying an existing EVT_DisputeStatusUpdate_Event instance.
   * @param other The existing instance to copy.
   * @return A new EVT_DisputeStatusUpdate_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder newBuilder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event other) {
    if (other == null) {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder();
    } else {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder(other);
    }
  }

  /**
   * RecordBuilder for EVT_DisputeStatusUpdate_Event instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EVT_DisputeStatusUpdate_Event>
    implements org.apache.avro.data.RecordBuilder<EVT_DisputeStatusUpdate_Event> {

    private java.lang.String ticket_no;
    private java.lang.String count_nbr;
    private java.lang.String dispute_action_dt;
    private java.lang.String dispute_action_code;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ticket_no)) {
        this.ticket_no = data().deepCopy(fields()[0].schema(), other.ticket_no);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.count_nbr)) {
        this.count_nbr = data().deepCopy(fields()[1].schema(), other.count_nbr);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dispute_action_dt)) {
        this.dispute_action_dt = data().deepCopy(fields()[2].schema(), other.dispute_action_dt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dispute_action_code)) {
        this.dispute_action_code = data().deepCopy(fields()[3].schema(), other.dispute_action_code);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing EVT_DisputeStatusUpdate_Event instance
     * @param other The existing instance to copy.
     */
    private Builder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ticket_no)) {
        this.ticket_no = data().deepCopy(fields()[0].schema(), other.ticket_no);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count_nbr)) {
        this.count_nbr = data().deepCopy(fields()[1].schema(), other.count_nbr);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dispute_action_dt)) {
        this.dispute_action_dt = data().deepCopy(fields()[2].schema(), other.dispute_action_dt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dispute_action_code)) {
        this.dispute_action_code = data().deepCopy(fields()[3].schema(), other.dispute_action_code);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ticket_no' field.
      * @return The value.
      */
    public java.lang.String getTicketNo() {
      return ticket_no;
    }


    /**
      * Sets the value of the 'ticket_no' field.
      * @param value The value of 'ticket_no'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder setTicketNo(java.lang.String value) {
      validate(fields()[0], value);
      this.ticket_no = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ticket_no' field has been set.
      * @return True if the 'ticket_no' field has been set, false otherwise.
      */
    public boolean hasTicketNo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ticket_no' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder clearTicketNo() {
      ticket_no = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'count_nbr' field.
      * @return The value.
      */
    public java.lang.String getCountNbr() {
      return count_nbr;
    }


    /**
      * Sets the value of the 'count_nbr' field.
      * @param value The value of 'count_nbr'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder setCountNbr(java.lang.String value) {
      validate(fields()[1], value);
      this.count_nbr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'count_nbr' field has been set.
      * @return True if the 'count_nbr' field has been set, false otherwise.
      */
    public boolean hasCountNbr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'count_nbr' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder clearCountNbr() {
      count_nbr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dispute_action_dt' field.
      * @return The value.
      */
    public java.lang.String getDisputeActionDt() {
      return dispute_action_dt;
    }


    /**
      * Sets the value of the 'dispute_action_dt' field.
      * @param value The value of 'dispute_action_dt'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder setDisputeActionDt(java.lang.String value) {
      validate(fields()[2], value);
      this.dispute_action_dt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dispute_action_dt' field has been set.
      * @return True if the 'dispute_action_dt' field has been set, false otherwise.
      */
    public boolean hasDisputeActionDt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dispute_action_dt' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder clearDisputeActionDt() {
      dispute_action_dt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dispute_action_code' field.
      * @return The value.
      */
    public java.lang.String getDisputeActionCode() {
      return dispute_action_code;
    }


    /**
      * Sets the value of the 'dispute_action_code' field.
      * @param value The value of 'dispute_action_code'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder setDisputeActionCode(java.lang.String value) {
      validate(fields()[3], value);
      this.dispute_action_code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dispute_action_code' field has been set.
      * @return True if the 'dispute_action_code' field has been set, false otherwise.
      */
    public boolean hasDisputeActionCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dispute_action_code' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute_statusupdate.EVT_DisputeStatusUpdate_Event.Builder clearDisputeActionCode() {
      dispute_action_code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EVT_DisputeStatusUpdate_Event build() {
      try {
        EVT_DisputeStatusUpdate_Event record = new EVT_DisputeStatusUpdate_Event();
        record.ticket_no = fieldSetFlags()[0] ? this.ticket_no : (java.lang.String) defaultValue(fields()[0]);
        record.count_nbr = fieldSetFlags()[1] ? this.count_nbr : (java.lang.String) defaultValue(fields()[1]);
        record.dispute_action_dt = fieldSetFlags()[2] ? this.dispute_action_dt : (java.lang.String) defaultValue(fields()[2]);
        record.dispute_action_code = fieldSetFlags()[3] ? this.dispute_action_code : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EVT_DisputeStatusUpdate_Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<EVT_DisputeStatusUpdate_Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EVT_DisputeStatusUpdate_Event>
    READER$ = (org.apache.avro.io.DatumReader<EVT_DisputeStatusUpdate_Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ticket_no);

    out.writeString(this.count_nbr);

    out.writeString(this.dispute_action_dt);

    out.writeString(this.dispute_action_code);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ticket_no = in.readString();

      this.count_nbr = in.readString();

      this.dispute_action_dt = in.readString();

      this.dispute_action_code = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ticket_no = in.readString();
          break;

        case 1:
          this.count_nbr = in.readString();
          break;

        case 2:
          this.dispute_action_dt = in.readString();
          break;

        case 3:
          this.dispute_action_code = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










