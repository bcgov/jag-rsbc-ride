/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bcgov.rsbc.ride.kafka.evteventproducer.model.dispute;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EVT_Dispute_Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8201174883929393828L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EVT_Dispute_Event\",\"namespace\":\"bcgov.rsbc.ride.kafka.evteventproducer.model.dispute\",\"fields\":[{\"name\":\"contravention_no\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"dispute_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"ticketed_amt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"compressed_section\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"count_act_regulation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"},{\"name\":\"created_dtmz\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EVT_Dispute_Event> ENCODER =
      new BinaryMessageEncoder<EVT_Dispute_Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EVT_Dispute_Event> DECODER =
      new BinaryMessageDecoder<EVT_Dispute_Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EVT_Dispute_Event> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EVT_Dispute_Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EVT_Dispute_Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EVT_Dispute_Event>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EVT_Dispute_Event to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EVT_Dispute_Event from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EVT_Dispute_Event instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EVT_Dispute_Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String contravention_no;
  @Deprecated public java.lang.String dispute_type;
  @Deprecated public java.lang.String ticketed_amt;
  @Deprecated public java.lang.String compressed_section;
  @Deprecated public java.lang.String count_act_regulation;
  @Deprecated public java.lang.String created_dtmz;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EVT_Dispute_Event() {}

  /**
   * All-args constructor.
   * @param contravention_no The new value for contravention_no
   * @param dispute_type The new value for dispute_type
   * @param ticketed_amt The new value for ticketed_amt
   * @param compressed_section The new value for compressed_section
   * @param count_act_regulation The new value for count_act_regulation
   * @param created_dtmz The new value for created_dtmz
   */
  public EVT_Dispute_Event(java.lang.String contravention_no, java.lang.String dispute_type, java.lang.String ticketed_amt, java.lang.String compressed_section, java.lang.String count_act_regulation, java.lang.String created_dtmz) {
    this.contravention_no = contravention_no;
    this.dispute_type = dispute_type;
    this.ticketed_amt = ticketed_amt;
    this.compressed_section = compressed_section;
    this.count_act_regulation = count_act_regulation;
    this.created_dtmz = created_dtmz;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return contravention_no;
    case 1: return dispute_type;
    case 2: return ticketed_amt;
    case 3: return compressed_section;
    case 4: return count_act_regulation;
    case 5: return created_dtmz;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: contravention_no = value$ != null ? value$.toString() : null; break;
    case 1: dispute_type = value$ != null ? value$.toString() : null; break;
    case 2: ticketed_amt = value$ != null ? value$.toString() : null; break;
    case 3: compressed_section = value$ != null ? value$.toString() : null; break;
    case 4: count_act_regulation = value$ != null ? value$.toString() : null; break;
    case 5: created_dtmz = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'contravention_no' field.
   * @return The value of the 'contravention_no' field.
   */
  public java.lang.String getContraventionNo() {
    return contravention_no;
  }


  /**
   * Sets the value of the 'contravention_no' field.
   * @param value the value to set.
   */
  public void setContraventionNo(java.lang.String value) {
    this.contravention_no = value;
  }

  /**
   * Gets the value of the 'dispute_type' field.
   * @return The value of the 'dispute_type' field.
   */
  public java.lang.String getDisputeType() {
    return dispute_type;
  }


  /**
   * Sets the value of the 'dispute_type' field.
   * @param value the value to set.
   */
  public void setDisputeType(java.lang.String value) {
    this.dispute_type = value;
  }

  /**
   * Gets the value of the 'ticketed_amt' field.
   * @return The value of the 'ticketed_amt' field.
   */
  public java.lang.String getTicketedAmt() {
    return ticketed_amt;
  }


  /**
   * Sets the value of the 'ticketed_amt' field.
   * @param value the value to set.
   */
  public void setTicketedAmt(java.lang.String value) {
    this.ticketed_amt = value;
  }

  /**
   * Gets the value of the 'compressed_section' field.
   * @return The value of the 'compressed_section' field.
   */
  public java.lang.String getCompressedSection() {
    return compressed_section;
  }


  /**
   * Sets the value of the 'compressed_section' field.
   * @param value the value to set.
   */
  public void setCompressedSection(java.lang.String value) {
    this.compressed_section = value;
  }

  /**
   * Gets the value of the 'count_act_regulation' field.
   * @return The value of the 'count_act_regulation' field.
   */
  public java.lang.String getCountActRegulation() {
    return count_act_regulation;
  }


  /**
   * Sets the value of the 'count_act_regulation' field.
   * @param value the value to set.
   */
  public void setCountActRegulation(java.lang.String value) {
    this.count_act_regulation = value;
  }

  /**
   * Gets the value of the 'created_dtmz' field.
   * @return The value of the 'created_dtmz' field.
   */
  public java.lang.String getCreatedDtmz() {
    return created_dtmz;
  }


  /**
   * Sets the value of the 'created_dtmz' field.
   * @param value the value to set.
   */
  public void setCreatedDtmz(java.lang.String value) {
    this.created_dtmz = value;
  }

  /**
   * Creates a new EVT_Dispute_Event RecordBuilder.
   * @return A new EVT_Dispute_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder newBuilder() {
    return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder();
  }

  /**
   * Creates a new EVT_Dispute_Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EVT_Dispute_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder newBuilder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder other) {
    if (other == null) {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder();
    } else {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder(other);
    }
  }

  /**
   * Creates a new EVT_Dispute_Event RecordBuilder by copying an existing EVT_Dispute_Event instance.
   * @param other The existing instance to copy.
   * @return A new EVT_Dispute_Event RecordBuilder
   */
  public static bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder newBuilder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event other) {
    if (other == null) {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder();
    } else {
      return new bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder(other);
    }
  }

  /**
   * RecordBuilder for EVT_Dispute_Event instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EVT_Dispute_Event>
    implements org.apache.avro.data.RecordBuilder<EVT_Dispute_Event> {

    private java.lang.String contravention_no;
    private java.lang.String dispute_type;
    private java.lang.String ticketed_amt;
    private java.lang.String compressed_section;
    private java.lang.String count_act_regulation;
    private java.lang.String created_dtmz;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.contravention_no)) {
        this.contravention_no = data().deepCopy(fields()[0].schema(), other.contravention_no);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dispute_type)) {
        this.dispute_type = data().deepCopy(fields()[1].schema(), other.dispute_type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ticketed_amt)) {
        this.ticketed_amt = data().deepCopy(fields()[2].schema(), other.ticketed_amt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.compressed_section)) {
        this.compressed_section = data().deepCopy(fields()[3].schema(), other.compressed_section);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.count_act_regulation)) {
        this.count_act_regulation = data().deepCopy(fields()[4].schema(), other.count_act_regulation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.created_dtmz)) {
        this.created_dtmz = data().deepCopy(fields()[5].schema(), other.created_dtmz);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing EVT_Dispute_Event instance
     * @param other The existing instance to copy.
     */
    private Builder(bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.contravention_no)) {
        this.contravention_no = data().deepCopy(fields()[0].schema(), other.contravention_no);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dispute_type)) {
        this.dispute_type = data().deepCopy(fields()[1].schema(), other.dispute_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ticketed_amt)) {
        this.ticketed_amt = data().deepCopy(fields()[2].schema(), other.ticketed_amt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.compressed_section)) {
        this.compressed_section = data().deepCopy(fields()[3].schema(), other.compressed_section);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.count_act_regulation)) {
        this.count_act_regulation = data().deepCopy(fields()[4].schema(), other.count_act_regulation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.created_dtmz)) {
        this.created_dtmz = data().deepCopy(fields()[5].schema(), other.created_dtmz);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'contravention_no' field.
      * @return The value.
      */
    public java.lang.String getContraventionNo() {
      return contravention_no;
    }


    /**
      * Sets the value of the 'contravention_no' field.
      * @param value The value of 'contravention_no'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setContraventionNo(java.lang.String value) {
      validate(fields()[0], value);
      this.contravention_no = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'contravention_no' field has been set.
      * @return True if the 'contravention_no' field has been set, false otherwise.
      */
    public boolean hasContraventionNo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'contravention_no' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearContraventionNo() {
      contravention_no = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dispute_type' field.
      * @return The value.
      */
    public java.lang.String getDisputeType() {
      return dispute_type;
    }


    /**
      * Sets the value of the 'dispute_type' field.
      * @param value The value of 'dispute_type'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setDisputeType(java.lang.String value) {
      validate(fields()[1], value);
      this.dispute_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dispute_type' field has been set.
      * @return True if the 'dispute_type' field has been set, false otherwise.
      */
    public boolean hasDisputeType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dispute_type' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearDisputeType() {
      dispute_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticketed_amt' field.
      * @return The value.
      */
    public java.lang.String getTicketedAmt() {
      return ticketed_amt;
    }


    /**
      * Sets the value of the 'ticketed_amt' field.
      * @param value The value of 'ticketed_amt'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setTicketedAmt(java.lang.String value) {
      validate(fields()[2], value);
      this.ticketed_amt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketed_amt' field has been set.
      * @return True if the 'ticketed_amt' field has been set, false otherwise.
      */
    public boolean hasTicketedAmt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ticketed_amt' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearTicketedAmt() {
      ticketed_amt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'compressed_section' field.
      * @return The value.
      */
    public java.lang.String getCompressedSection() {
      return compressed_section;
    }


    /**
      * Sets the value of the 'compressed_section' field.
      * @param value The value of 'compressed_section'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setCompressedSection(java.lang.String value) {
      validate(fields()[3], value);
      this.compressed_section = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'compressed_section' field has been set.
      * @return True if the 'compressed_section' field has been set, false otherwise.
      */
    public boolean hasCompressedSection() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'compressed_section' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearCompressedSection() {
      compressed_section = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'count_act_regulation' field.
      * @return The value.
      */
    public java.lang.String getCountActRegulation() {
      return count_act_regulation;
    }


    /**
      * Sets the value of the 'count_act_regulation' field.
      * @param value The value of 'count_act_regulation'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setCountActRegulation(java.lang.String value) {
      validate(fields()[4], value);
      this.count_act_regulation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'count_act_regulation' field has been set.
      * @return True if the 'count_act_regulation' field has been set, false otherwise.
      */
    public boolean hasCountActRegulation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'count_act_regulation' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearCountActRegulation() {
      count_act_regulation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_dtmz' field.
      * @return The value.
      */
    public java.lang.String getCreatedDtmz() {
      return created_dtmz;
    }


    /**
      * Sets the value of the 'created_dtmz' field.
      * @param value The value of 'created_dtmz'.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder setCreatedDtmz(java.lang.String value) {
      validate(fields()[5], value);
      this.created_dtmz = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'created_dtmz' field has been set.
      * @return True if the 'created_dtmz' field has been set, false otherwise.
      */
    public boolean hasCreatedDtmz() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'created_dtmz' field.
      * @return This builder.
      */
    public bcgov.rsbc.ride.kafka.evteventproducer.model.dispute.EVT_Dispute_Event.Builder clearCreatedDtmz() {
      created_dtmz = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EVT_Dispute_Event build() {
      try {
        EVT_Dispute_Event record = new EVT_Dispute_Event();
        record.contravention_no = fieldSetFlags()[0] ? this.contravention_no : (java.lang.String) defaultValue(fields()[0]);
        record.dispute_type = fieldSetFlags()[1] ? this.dispute_type : (java.lang.String) defaultValue(fields()[1]);
        record.ticketed_amt = fieldSetFlags()[2] ? this.ticketed_amt : (java.lang.String) defaultValue(fields()[2]);
        record.compressed_section = fieldSetFlags()[3] ? this.compressed_section : (java.lang.String) defaultValue(fields()[3]);
        record.count_act_regulation = fieldSetFlags()[4] ? this.count_act_regulation : (java.lang.String) defaultValue(fields()[4]);
        record.created_dtmz = fieldSetFlags()[5] ? this.created_dtmz : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EVT_Dispute_Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<EVT_Dispute_Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EVT_Dispute_Event>
    READER$ = (org.apache.avro.io.DatumReader<EVT_Dispute_Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.contravention_no);

    out.writeString(this.dispute_type);

    out.writeString(this.ticketed_amt);

    out.writeString(this.compressed_section);

    out.writeString(this.count_act_regulation);

    out.writeString(this.created_dtmz);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.contravention_no = in.readString();

      this.dispute_type = in.readString();

      this.ticketed_amt = in.readString();

      this.compressed_section = in.readString();

      this.count_act_regulation = in.readString();

      this.created_dtmz = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.contravention_no = in.readString();
          break;

        case 1:
          this.dispute_type = in.readString();
          break;

        case 2:
          this.ticketed_amt = in.readString();
          break;

        case 3:
          this.compressed_section = in.readString();
          break;

        case 4:
          this.count_act_regulation = in.readString();
          break;

        case 5:
          this.created_dtmz = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










